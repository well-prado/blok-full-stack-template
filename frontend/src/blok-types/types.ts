/**
 * Generated TypeScript types for Blok workflows
 * Generated at: 2025-09-25T03:52:11.463Z
 * Do not edit this file manually
 */

// Union type of all available workflow names for IntelliSense
export type WorkflowName =
  | 'countries-helper'
  | 'countries-cats-helper'
  | 'empty-helper'
  | 'auth-login'
  | 'auth-register'
  | 'auth-logout'
  | 'verify-session'
  | 'protected-example'
  | 'email-service-config'
  | 'email-verification'
  | 'password-reset'
  | 'profile-image-upload'
  | 'profile-update'
  | 'theme-preferences'
  | 'user-notifications'
  | 'mark-notification-read'
  | 'clear-all-notifications'
  | 'create-notification'
  | 'admin-dashboard'
  | 'admin-logs'
  | 'user-management'
  | 'user-role-management'
  | 'user-update'
  | 'user-delete'
  | 'admin-user-create'
  | 'user-list-test'
  | 'user-find-test'
  | 'email-validation-test'
  | 'password-validation-test'
  | 'two-factor-auth'
  | 'audit-logs'
  | 'rate-limit-test'
  | 'workflow-discovery';

// Conditional type mapping for workflow inputs
export type WorkflowInputMap = {
  'countries-helper': CountriesHelperInput;
  'countries-cats-helper': CountriesCatsHelperInput;
  'empty-helper': EmptyHelperInput;
  'auth-login': AuthLoginInput;
  'auth-register': AuthRegisterInput;
  'auth-logout': AuthLogoutInput;
  'verify-session': VerifySessionInput;
  'protected-example': ProtectedExampleInput;
  'email-service-config': EmailServiceConfigInput;
  'email-verification': EmailVerificationInput;
  'password-reset': PasswordResetInput;
  'profile-image-upload': ProfileImageUploadInput;
  'profile-update': ProfileUpdateInput;
  'theme-preferences': ThemePreferencesInput;
  'user-notifications': UserNotificationsInput;
  'mark-notification-read': MarkNotificationReadInput;
  'clear-all-notifications': ClearAllNotificationsInput;
  'create-notification': CreateNotificationInput;
  'admin-dashboard': AdminDashboardInput;
  'admin-logs': AdminLogsInput;
  'user-management': UserManagementInput;
  'user-role-management': UserRoleManagementInput;
  'user-update': UserUpdateInput;
  'user-delete': UserDeleteInput;
  'admin-user-create': AdminUserCreateInput;
  'user-list-test': UserListTestInput;
  'user-find-test': UserFindTestInput;
  'email-validation-test': EmailValidationTestInput;
  'password-validation-test': PasswordValidationTestInput;
  'two-factor-auth': TwoFactorAuthInput;
  'audit-logs': AuditLogsInput;
  'rate-limit-test': RateLimitTestInput;
  'workflow-discovery': WorkflowDiscoveryInput;
};

// Conditional type mapping for workflow outputs
export type WorkflowOutputMap = {
  'countries-helper': CountriesHelperOutput;
  'countries-cats-helper': CountriesCatsHelperOutput;
  'empty-helper': EmptyHelperOutput;
  'auth-login': AuthLoginOutput;
  'auth-register': AuthRegisterOutput;
  'auth-logout': AuthLogoutOutput;
  'verify-session': VerifySessionOutput;
  'protected-example': ProtectedExampleOutput;
  'email-service-config': EmailServiceConfigOutput;
  'email-verification': EmailVerificationOutput;
  'password-reset': PasswordResetOutput;
  'profile-image-upload': ProfileImageUploadOutput;
  'profile-update': ProfileUpdateOutput;
  'theme-preferences': ThemePreferencesOutput;
  'user-notifications': UserNotificationsOutput;
  'mark-notification-read': MarkNotificationReadOutput;
  'clear-all-notifications': ClearAllNotificationsOutput;
  'create-notification': CreateNotificationOutput;
  'admin-dashboard': AdminDashboardOutput;
  'admin-logs': AdminLogsOutput;
  'user-management': UserManagementOutput;
  'user-role-management': UserRoleManagementOutput;
  'user-update': UserUpdateOutput;
  'user-delete': UserDeleteOutput;
  'admin-user-create': AdminUserCreateOutput;
  'user-list-test': UserListTestOutput;
  'user-find-test': UserFindTestOutput;
  'email-validation-test': EmailValidationTestOutput;
  'password-validation-test': PasswordValidationTestOutput;
  'two-factor-auth': TwoFactorAuthOutput;
  'audit-logs': AuditLogsOutput;
  'rate-limit-test': RateLimitTestOutput;
  'workflow-discovery': WorkflowDiscoveryOutput;
};

// Helper types to get input/output types for a specific workflow
export type GetWorkflowInput<T extends WorkflowName> = WorkflowInputMap[T];
export type GetWorkflowOutput<T extends WorkflowName> = WorkflowOutputMap[T];

export interface CountriesHelperInput {
  [k: string]: unknown;
}

export interface CountriesHelperOutput {
  success: boolean;
  data?: {
    [k: string]: unknown;
  };
  message?: string;
  statusCode?: number;
  [k: string]: unknown;
}

export interface CountriesHelperParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface CountriesCatsHelperInput {
  [k: string]: unknown;
}

export interface CountriesCatsHelperOutput {
  success: boolean;
  data?: {
    [k: string]: unknown;
  };
  message?: string;
  statusCode?: number;
  [k: string]: unknown;
}

export interface CountriesCatsHelperParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface EmptyHelperInput {
  [k: string]: unknown;
}

export interface EmptyHelperOutput {
  success: boolean;
  data?: {
    [k: string]: unknown;
  };
  message?: string;
  statusCode?: number;
  [k: string]: unknown;
}

export interface EmptyHelperParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface AuthLoginInput {
  email: string;
  password: string;
  sessionDurationHours?: number;
}

export interface AuthLoginOutput {
  /**
   * Whether the login was successful
   */
  success: boolean;
  /**
   * Logged in user information (only present on success)
   */
  user?: {
    /**
     * Unique user identifier
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role
     */
    role: 'ADMIN' | 'USER';
    /**
     * Whether user's email is verified
     */
    emailVerified: boolean;
    [k: string]: unknown;
  };
  /**
   * Created session information (only present on success)
   */
  session?: {
    /**
     * Unique session identifier
     */
    id: string;
    /**
     * JWT session token
     */
    token: string;
    /**
     * Session expiration timestamp
     */
    expiresAt: string;
    [k: string]: unknown;
  };
  /**
   * Human-readable result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 400 | 401 | 500;
  [k: string]: unknown;
}

export interface AuthLoginParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface AuthRegisterInput {
  email: string;
  password: string;
  name: string;
  role?: 'user' | 'admin';
}

export interface AuthRegisterOutput {
  /**
   * Whether the registration was successful
   */
  success: boolean;
  /**
   * Created user information (only present on success)
   */
  user?: {
    /**
     * Unique user identifier
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role
     */
    role: 'ADMIN' | 'USER';
    /**
     * Whether user's email is verified
     */
    emailVerified: boolean;
    /**
     * Account creation timestamp
     */
    createdAt: string;
    [k: string]: unknown;
  };
  /**
   * Human-readable result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 201 | 400 | 409 | 500;
  [k: string]: unknown;
}

export interface AuthRegisterParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface AuthLogoutInput {
  [k: string]: unknown;
}

export interface AuthLogoutOutput {
  /**
   * Whether the logout was successful
   */
  success: boolean;
  /**
   * Human-readable result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 400 | 401 | 500;
  /**
   * Number of sessions destroyed
   */
  sessionsDestroyed: number;
  [k: string]: unknown;
}

export interface AuthLogoutParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface VerifySessionInput {
  [k: string]: unknown;
}

export interface VerifySessionOutput {
  /**
   * Whether the user is authenticated
   */
  isAuthenticated: boolean;
  /**
   * Authenticated user information (only present if authenticated)
   */
  user?: {
    /**
     * Unique user identifier
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role
     */
    role: 'ADMIN' | 'USER';
    /**
     * Whether user's email is verified
     */
    emailVerified: boolean;
    [k: string]: unknown;
  };
  /**
   * Session information (only present if authenticated)
   */
  session?: {
    /**
     * Unique session identifier
     */
    id: string;
    /**
     * Session expiration timestamp
     */
    expiresAt: string;
    [k: string]: unknown;
  };
  /**
   * Human-readable result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 401 | 500;
  [k: string]: unknown;
}

export interface VerifySessionParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface ProtectedExampleInput {
  [k: string]: unknown;
}

export interface ProtectedExampleOutput {
  /**
   * Whether the user is authenticated
   */
  isAuthenticated: boolean;
  /**
   * Authenticated user information (only present if authenticated)
   */
  user?: {
    /**
     * Unique user identifier
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role
     */
    role: 'ADMIN' | 'USER';
    /**
     * Whether user's email is verified
     */
    emailVerified: boolean;
    [k: string]: unknown;
  };
  /**
   * Session information (only present if authenticated)
   */
  session?: {
    /**
     * Unique session identifier
     */
    id: string;
    /**
     * Session expiration timestamp
     */
    expiresAt: string;
    [k: string]: unknown;
  };
  /**
   * Human-readable result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 401 | 500;
  [k: string]: unknown;
}

export interface ProtectedExampleParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface EmailServiceConfigInput {
  [k: string]: unknown;
}

export type EmailServiceConfigOutput =
  | {
      /**
       * Whether the configuration was successful
       */
      success: true;
      /**
       * Success message
       */
      message: 'Email service configured successfully';
      /**
       * Configured email provider
       */
      provider: 'resend' | 'sendgrid' | 'nodemailer' | 'mailtrap' | 'postmark';
      [k: string]: unknown;
    }
  | {
      /**
       * Whether the email was sent successfully
       */
      success: true;
      /**
       * Success message
       */
      message: 'Email sent successfully';
      /**
       * Email sending result from provider
       */
      result: {
        /**
         * Unique message identifier
         */
        messageId?: string;
        /**
         * Email delivery status
         */
        status?: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      /**
       * Whether the test was completed
       */
      success: true;
      /**
       * Test completion message
       */
      message: 'Email service test completed';
      /**
       * Test result details
       */
      result: {
        /**
         * Whether the email service is working
         */
        isWorking: boolean;
        /**
         * Tested provider
         */
        provider: 'resend' | 'sendgrid' | 'nodemailer' | 'mailtrap' | 'postmark';
        /**
         * Additional test details
         */
        testDetails?: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      /**
       * Whether the config was retrieved
       */
      success: true;
      /**
       * Current email service configuration
       */
      config: {
        /**
         * Configured email provider
         */
        provider: 'resend' | 'sendgrid' | 'nodemailer' | 'mailtrap' | 'postmark';
        /**
         * Default from email address
         */
        fromEmail: string;
        /**
         * Default from name
         */
        fromName?: string;
        /**
         * Whether the service is configured
         */
        isConfigured: boolean;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };

export interface EmailServiceConfigParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface EmailVerificationInput {
  [k: string]: unknown;
}

export type EmailVerificationOutput =
  | {
      /**
       * Whether the token was generated successfully
       */
      success: true;
      /**
       * Success message
       */
      message: 'Verification token generated successfully';
      /**
       * Generated verification token
       */
      token: string;
      /**
       * Token expiration timestamp
       */
      expiresAt: string;
      [k: string]: unknown;
    }
  | {
      /**
       * Whether the verification was processed
       */
      success: true;
      /**
       * Verification result message
       */
      message: 'Email verified successfully' | 'Invalid or expired token';
      /**
       * Whether the token is valid
       */
      valid: boolean;
      /**
       * User ID associated with the token
       */
      userId?: string;
      /**
       * Email address that was verified
       */
      email?: string;
      [k: string]: unknown;
    }
  | {
      /**
       * Whether the verification email was resent
       */
      success: true;
      /**
       * Success message
       */
      message: 'Verification email resent successfully';
      /**
       * New verification token
       */
      token: string;
      /**
       * Token expiration timestamp
       */
      expiresAt: string;
      /**
       * Whether the email was sent successfully
       */
      emailSent: boolean;
      [k: string]: unknown;
    };

export interface EmailVerificationParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface PasswordResetInput {
  [k: string]: unknown;
}

export interface PasswordResetOutput {
  /**
   * Whether the template was generated successfully
   */
  success: true;
  /**
   * Generated email template
   */
  template: {
    /**
     * Email subject line
     */
    subject: string;
    /**
     * HTML email content
     */
    html?: string;
    /**
     * Plain text email content
     */
    text?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}

export interface PasswordResetParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface ProfileImageUploadInput {
  name?: string;
  email?: string;
  currentPassword?: string;
  newPassword?: string;
  profileImage?: string;
  preferences?: {
    [k: string]: unknown;
  };
}

export interface ProfileImageUploadOutput {
  /**
   * Whether the image upload was successful
   */
  success: boolean;
  /**
   * Relative path to the uploaded image file
   */
  imagePath: string;
  /**
   * URL path for frontend access
   */
  imageUrl: string;
  /**
   * Human-readable result message
   */
  message: string;
  /**
   * Generated filename for the uploaded image
   */
  fileName: string;
  /**
   * Size of the uploaded file in bytes
   */
  fileSize: number;
  /**
   * MIME type of the uploaded image
   */
  mimeType: 'image/png' | 'image/jpg' | 'image/jpeg' | 'image/gif' | 'image/webp';
  [k: string]: unknown;
}

export interface ProfileImageUploadParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface ProfileUpdateInput {
  name?: string;
  email?: string;
  currentPassword?: string;
  newPassword?: string;
  profileImage?: string;
  preferences?: {
    [k: string]: unknown;
  };
}

export interface ProfileUpdateOutput {
  /**
   * Whether the profile update was successful
   */
  success: boolean;
  /**
   * Updated user profile information
   */
  user: {
    /**
     * Unique user identifier
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role
     */
    role: 'ADMIN' | 'USER';
    /**
     * Whether user's email is verified
     */
    emailVerified: boolean;
    /**
     * Profile image URL or path
     */
    profileImage: string;
    /**
     * User preferences and settings
     */
    preferences: {
      /**
       * UI theme preference
       */
      theme?: 'light' | 'dark' | 'system';
      notifications?:
        | boolean
        | {
            /**
             * Email notifications enabled
             */
            email?: boolean;
            /**
             * Push notifications enabled
             */
            push?: boolean;
            /**
             * Marketing notifications enabled
             */
            marketing?: boolean;
            [k: string]: unknown;
          };
      /**
       * Email updates preference
       */
      emailUpdates?: boolean;
      /**
       * Preferred language
       */
      language?: string;
      /**
       * User's timezone
       */
      timezone?: string;
      /**
       * User biography
       */
      bio?: string;
      [k: string]: unknown;
    };
    /**
     * Account creation timestamp
     */
    createdAt: string;
    /**
     * Last update timestamp
     */
    updatedAt: string;
    [k: string]: unknown;
  };
  /**
   * Human-readable result message
   */
  message: string;
  [k: string]: unknown;
}

export interface ProfileUpdateParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface ThemePreferencesInput {
  [k: string]: unknown;
}

export interface ThemePreferencesOutput {
  /**
   * Whether the theme preferences were updated successfully
   */
  success: boolean;
  /**
   * Success message
   */
  message: 'Theme preferences updated successfully';
  /**
   * Updated user preferences object
   */
  preferences: {
    /**
     * Theme preferences
     */
    theme?: {
      /**
       * Selected theme ID
       */
      id: 'classic' | 'ocean' | 'forest' | 'sunset' | 'purple' | 'rose';
      /**
       * Selected theme mode
       */
      mode: 'light' | 'dark';
      /**
       * Theme preference update timestamp
       */
      updatedAt: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * Applied theme settings
   */
  theme: {
    /**
     * Applied theme ID
     */
    id: 'classic' | 'ocean' | 'forest' | 'sunset' | 'purple' | 'rose';
    /**
     * Applied theme mode
     */
    mode: 'light' | 'dark';
    [k: string]: unknown;
  };
  [k: string]: unknown;
}

export interface ThemePreferencesParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface UserNotificationsInput {
  [k: string]: unknown;
}

export interface UserNotificationsOutput {
  /**
   * Whether the notifications were retrieved successfully
   */
  success: boolean;
  data: {
    /**
     * Array of user notifications
     */
    notifications: {
      /**
       * Unique identifier for the notification
       */
      id: string;
      /**
       * Notification title
       */
      title: string;
      /**
       * Notification message content
       */
      message: string;
      /**
       * Type of notification
       */
      type: 'info' | 'success' | 'warning' | 'error' | 'system';
      /**
       * Priority level of the notification
       */
      priority: 'low' | 'medium' | 'high' | 'urgent';
      /**
       * Whether the notification has been read
       */
      isRead: boolean;
      /**
       * URL to navigate when notification is clicked
       */
      actionUrl?: string | null;
      /**
       * Label for the action button
       */
      actionLabel?: string | null;
      /**
       * Notification category
       */
      category?: string | null;
      /**
       * Additional metadata as JSON object
       */
      metadata?: {
        [k: string]: unknown;
      } | null;
      /**
       * Name of the workflow that created this notification
       */
      sourceWorkflow?: string | null;
      /**
       * Name of the node that created this notification
       */
      sourceNode?: string | null;
      /**
       * ISO timestamp when the notification was created
       */
      createdAt: string;
      /**
       * ISO timestamp when the notification was read
       */
      readAt?: string | null;
      /**
       * ISO timestamp when the notification expires
       */
      expiresAt?: string | null;
      [k: string]: unknown;
    }[];
    pagination: {
      /**
       * Number of notifications per page
       */
      limit: number;
      /**
       * Number of notifications skipped
       */
      offset: number;
      /**
       * Total number of notifications matching the criteria
       */
      totalCount: number;
      /**
       * Whether there are more notifications available
       */
      hasMore: boolean;
      [k: string]: unknown;
    };
    /**
     * Number of unread notifications for the user
     */
    unreadCount: number;
    [k: string]: unknown;
  };
  /**
   * Success message
   */
  message: string;
  [k: string]: unknown;
}

export interface UserNotificationsParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface MarkNotificationReadInput {
  [k: string]: unknown;
}

export interface MarkNotificationReadOutput {
  /**
   * Whether the notification was updated successfully
   */
  success: boolean;
  notification: {
    /**
     * Unique identifier for the notification
     */
    id: string;
    /**
     * Notification title
     */
    title: string;
    /**
     * Notification message content
     */
    message: string;
    /**
     * Type of notification
     */
    type: 'info' | 'success' | 'warning' | 'error' | 'system';
    /**
     * Priority level of the notification
     */
    priority: 'low' | 'medium' | 'high' | 'urgent';
    /**
     * Whether the notification has been read
     */
    isRead: boolean;
    /**
     * ISO timestamp when the notification was read
     */
    readAt?: string | null;
    /**
     * URL to navigate when notification is clicked
     */
    actionUrl?: string | null;
    /**
     * Label for the action button
     */
    actionLabel?: string | null;
    /**
     * Notification category
     */
    category?: string | null;
    /**
     * Additional metadata as JSON object
     */
    metadata?: {
      [k: string]: unknown;
    } | null;
    /**
     * ISO timestamp when the notification was created
     */
    createdAt: string;
    [k: string]: unknown;
  };
  /**
   * Success message indicating the action performed
   */
  message: string;
  [k: string]: unknown;
}

export interface MarkNotificationReadParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface ClearAllNotificationsInput {
  [k: string]: unknown;
}

export interface ClearAllNotificationsOutput {
  /**
   * Whether the notifications were cleared successfully
   */
  success: boolean;
  data: {
    /**
     * Number of notifications that were affected
     */
    affectedCount: number;
    /**
     * The action that was performed on the notifications
     */
    action: 'marked_as_read' | 'deleted';
    /**
     * ID of the user whose notifications were cleared
     */
    userId: string;
    [k: string]: unknown;
  };
  /**
   * Success message describing the operation result
   */
  message: string;
  [k: string]: unknown;
}

export interface ClearAllNotificationsParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface CreateNotificationInput {
  [k: string]: unknown;
}

export interface CreateNotificationOutput {
  /**
   * Whether the notification was created successfully
   */
  success: boolean;
  notification: {
    /**
     * Unique identifier for the notification
     */
    id: string;
    /**
     * ID of the user who will receive the notification
     */
    userId: string;
    /**
     * Notification title
     */
    title: string;
    /**
     * Notification message content
     */
    message: string;
    /**
     * Type of notification
     */
    type: 'info' | 'success' | 'warning' | 'error' | 'system';
    /**
     * Priority level of the notification
     */
    priority: 'low' | 'medium' | 'high' | 'urgent';
    /**
     * Whether the notification has been read
     */
    isRead: boolean;
    /**
     * URL to navigate when notification is clicked
     */
    actionUrl?: string | null;
    /**
     * Label for the action button
     */
    actionLabel?: string | null;
    /**
     * Notification category
     */
    category?: string | null;
    /**
     * Additional metadata as JSON object
     */
    metadata?: {
      [k: string]: unknown;
    } | null;
    /**
     * Name of the workflow that created this notification
     */
    sourceWorkflow?: string | null;
    /**
     * Name of the node that created this notification
     */
    sourceNode?: string | null;
    /**
     * ISO timestamp when the notification was created
     */
    createdAt: string;
    /**
     * ISO timestamp when the notification expires
     */
    expiresAt?: string | null;
    [k: string]: unknown;
  };
  /**
   * Success message
   */
  message: string;
  [k: string]: unknown;
}

export interface CreateNotificationParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface AdminDashboardInput {
  page?: number;
  limit?: number;
  search?: string;
  role?: 'user' | 'admin';
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

export interface AdminDashboardOutput {
  success: boolean;
  data?: {
    [k: string]: unknown;
  };
  message?: string;
  statusCode?: number;
  [k: string]: unknown;
}

export interface AdminDashboardParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface AdminLogsInput {
  page?: number;
  limit?: number;
  search?: string;
  role?: 'user' | 'admin';
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

export interface AdminLogsOutput {
  success: boolean;
  data?: {
    [k: string]: unknown;
  };
  message?: string;
  statusCode?: number;
  [k: string]: unknown;
}

export interface AdminLogsParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface UserManagementInput {
  page?: number;
  limit?: number;
  search?: string;
  role?: 'user' | 'admin';
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

export interface UserManagementOutput {
  success: boolean;
  data?: {
    [k: string]: unknown;
  };
  message?: string;
  statusCode?: number;
  [k: string]: unknown;
}

export interface UserManagementParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface UserRoleManagementInput {
  [k: string]: unknown;
}

export type UserRoleManagementOutput =
  | {
      /**
       * Whether the role update was successful
       */
      success: boolean;
      /**
       * Operation result message
       */
      message: string;
      data: {
        /**
         * ID of the user whose role was updated
         */
        userId: string;
        /**
         * Previous role of the user
         */
        oldRole: 'admin' | 'user';
        /**
         * New role assigned to the user
         */
        newRole: 'admin' | 'user';
        /**
         * Timestamp when the role was updated
         */
        updatedAt: string;
        /**
         * ID of the admin who performed the update
         */
        updatedBy: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      /**
       * Whether the bulk update was successful
       */
      success: boolean;
      /**
       * Operation result message
       */
      message: string;
      data: {
        /**
         * Array of successfully updated users
         */
        updatedUsers: {
          /**
           * ID of the updated user
           */
          userId: string;
          /**
           * Previous role
           */
          oldRole: 'admin' | 'user';
          /**
           * New role
           */
          newRole: 'admin' | 'user';
          [k: string]: unknown;
        }[];
        /**
         * Array of users that failed to update
         */
        failedUsers: {
          /**
           * ID of the user that failed to update
           */
          userId: string;
          /**
           * Error message for this user
           */
          error: string;
          [k: string]: unknown;
        }[];
        /**
         * Total number of users processed
         */
        totalProcessed: number;
        /**
         * Number of successful updates
         */
        successCount: number;
        /**
         * Number of failed updates
         */
        failureCount: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      /**
       * Whether the stats retrieval was successful
       */
      success: boolean;
      /**
       * Operation result message
       */
      message: string;
      data: {
        /**
         * Total number of users in the system
         */
        totalUsers: number;
        /**
         * Number of admin users
         */
        adminUsers: number;
        /**
         * Number of regular users
         */
        regularUsers: number;
        /**
         * Recent role changes for audit purposes
         */
        recentRoleChanges: {
          /**
           * ID of the user whose role changed
           */
          userId: string;
          /**
           * Name of the user
           */
          userName: string;
          /**
           * Previous role
           */
          oldRole: 'admin' | 'user';
          /**
           * New role
           */
          newRole: 'admin' | 'user';
          /**
           * When the role was changed
           */
          changedAt: string;
          /**
           * ID of the admin who made the change
           */
          changedBy: string;
          [k: string]: unknown;
        }[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };

export interface UserRoleManagementParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface UserUpdateInput {
  [k: string]: unknown;
}

export interface UserUpdateOutput {
  /**
   * Whether the user was updated successfully
   */
  success: boolean;
  /**
   * Updated user information (only present on success)
   */
  user?: {
    /**
     * Unique user identifier
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role
     */
    role: 'ADMIN' | 'USER';
    /**
     * Whether user's email is verified
     */
    emailVerified: boolean;
    /**
     * Account creation timestamp
     */
    createdAt: string;
    /**
     * Last update timestamp
     */
    updatedAt: string;
    [k: string]: unknown;
  };
  /**
   * Human-readable result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 400 | 404 | 409 | 500;
  /**
   * List of fields that were updated
   */
  fieldsUpdated: ('email' | 'name' | 'role' | 'emailVerified' | 'password')[];
  [k: string]: unknown;
}

export interface UserUpdateParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface UserDeleteInput {
  [k: string]: unknown;
}

export interface UserDeleteOutput {
  /**
   * Whether the user was deleted successfully
   */
  success: boolean;
  /**
   * Deleted user information (only present on success)
   */
  deletedUser?: {
    /**
     * Unique user identifier
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role
     */
    role: 'ADMIN' | 'USER';
    /**
     * Deletion timestamp
     */
    deletedAt: string;
    [k: string]: unknown;
  };
  /**
   * Human-readable result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 400 | 404 | 500;
  /**
   * Number of associated sessions deleted
   */
  sessionsDeleted: number;
  [k: string]: unknown;
}

export interface UserDeleteParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface AdminUserCreateInput {
  page?: number;
  limit?: number;
  search?: string;
  role?: 'user' | 'admin';
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

export interface AdminUserCreateOutput {
  success: boolean;
  data?: {
    [k: string]: unknown;
  };
  message?: string;
  statusCode?: number;
  [k: string]: unknown;
}

export interface AdminUserCreateParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface UserListTestInput {
  [k: string]: unknown;
}

export interface UserListTestOutput {
  /**
   * Whether the user list was retrieved successfully
   */
  success: boolean;
  /**
   * Array of users matching the criteria
   */
  users: {
    /**
     * Unique user identifier
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role
     */
    role: 'ADMIN' | 'USER';
    /**
     * Whether user's email is verified
     */
    emailVerified: boolean;
    /**
     * Account creation timestamp
     */
    createdAt: string;
    /**
     * Last update timestamp
     */
    updatedAt: string;
    [k: string]: unknown;
  }[];
  /**
   * Pagination information
   */
  pagination: {
    /**
     * Current page number
     */
    currentPage: number;
    /**
     * Total number of pages
     */
    totalPages: number;
    /**
     * Total number of users matching criteria
     */
    totalUsers: number;
    /**
     * Whether there is a next page
     */
    hasNext: boolean;
    /**
     * Whether there is a previous page
     */
    hasPrev: boolean;
    /**
     * Number of users per page
     */
    limit: number;
    [k: string]: unknown;
  };
  /**
   * Human-readable result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 400 | 500;
  [k: string]: unknown;
}

export interface UserListTestParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface UserFindTestInput {
  [k: string]: unknown;
}

export interface UserFindTestOutput {
  /**
   * Whether the user was found successfully
   */
  success: boolean;
  /**
   * Found user information (only present if user exists)
   */
  user?: {
    /**
     * Unique user identifier
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role
     */
    role: 'ADMIN' | 'USER';
    /**
     * Whether user's email is verified
     */
    emailVerified: boolean;
    /**
     * Account creation timestamp
     */
    createdAt: string;
    /**
     * Last update timestamp
     */
    updatedAt: string;
    /**
     * Password hash (only included if includePassword is true)
     */
    password?: string;
    [k: string]: unknown;
  };
  /**
   * Human-readable result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 400 | 404 | 500;
  [k: string]: unknown;
}

export interface UserFindTestParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface EmailValidationTestInput {
  [k: string]: unknown;
}

export interface EmailValidationTestOutput {
  /**
   * Whether the email validation was successful
   */
  success: boolean;
  validation: {
    /**
     * Whether the email address is valid
     */
    isValid: boolean;
    /**
     * The validated email address
     */
    email: string;
    /**
     * The normalized version of the email address
     */
    normalizedEmail: string;
    /**
     * The domain part of the email address
     */
    domain: string;
    /**
     * The local part (before @) of the email address
     */
    localPart: string;
    checks: {
      /**
       * Whether the email format is valid
       */
      format: boolean;
      /**
       * Whether the domain format is valid
       */
      domain: boolean;
      /**
       * Whether the email uses a disposable domain
       */
      disposable: boolean;
      /**
       * Whether the domain has valid MX records
       */
      mx: boolean;
      [k: string]: unknown;
    };
    /**
     * List of validation errors
     */
    errors: string[];
    /**
     * List of validation warnings
     */
    warnings: string[];
    [k: string]: unknown;
  };
  /**
   * Human-readable validation result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 400;
  [k: string]: unknown;
}

export interface EmailValidationTestParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface PasswordValidationTestInput {
  [k: string]: unknown;
}

export interface PasswordValidationTestOutput {
  /**
   * Whether the password validation was successful
   */
  success: boolean;
  validation: {
    /**
     * Whether the password meets all requirements
     */
    isValid: boolean;
    /**
     * Overall password strength assessment
     */
    strength: 'weak' | 'fair' | 'good' | 'strong' | 'very-strong';
    /**
     * Password strength score (0-100)
     */
    score: number;
    /**
     * List of validation errors
     */
    errors: string[];
    /**
     * List of validation warnings
     */
    warnings: string[];
    /**
     * List of suggestions to improve the password
     */
    suggestions: string[];
    checks: {
      /**
       * Whether password meets length requirements
       */
      length: boolean;
      /**
       * Whether password contains uppercase letters
       */
      uppercase: boolean;
      /**
       * Whether password contains lowercase letters
       */
      lowercase: boolean;
      /**
       * Whether password contains numbers
       */
      numbers: boolean;
      /**
       * Whether password contains special characters
       */
      specialChars: boolean;
      /**
       * Whether password avoids common passwords
       */
      commonPassword: boolean;
      /**
       * Whether password avoids personal information
       */
      personalInfo: boolean;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * Human-readable validation result message
   */
  message: string;
  /**
   * HTTP status code
   */
  statusCode: 200 | 400;
  [k: string]: unknown;
}

export interface PasswordValidationTestParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface TwoFactorAuthInput {
  [k: string]: unknown;
}

export type TwoFactorAuthOutput =
  | {
      /**
       * Whether 2FA setup was successful
       */
      success: boolean;
      /**
       * Setup result message
       */
      message: string;
      data: {
        /**
         * TOTP secret key for the user
         */
        secret: string;
        /**
         * QR code URL for authenticator app setup
         */
        qrCodeUrl: string;
        /**
         * One-time backup codes for account recovery
         */
        backupCodes: string[];
        /**
         * Whether the setup process is complete
         */
        setupComplete: boolean;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      /**
       * Whether 2FA verification was successful
       */
      success: boolean;
      /**
       * Verification result message
       */
      message: string;
      data: {
        /**
         * Whether the token was valid
         */
        verified: boolean;
        /**
         * Whether 2FA is now enabled for the user
         */
        enabled: boolean;
        /**
         * ID of the user
         */
        userId: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      /**
       * Whether 2FA was successfully disabled
       */
      success: boolean;
      /**
       * Disable result message
       */
      message: string;
      data: {
        /**
         * Whether 2FA is now disabled
         */
        disabled: boolean;
        /**
         * ID of the user
         */
        userId: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      /**
       * Whether backup codes were generated successfully
       */
      success: boolean;
      /**
       * Generation result message
       */
      message: string;
      data: {
        /**
         * New backup codes for account recovery
         */
        backupCodes: string[];
        /**
         * ID of the user
         */
        userId: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      /**
       * Whether backup code verification was successful
       */
      success: boolean;
      /**
       * Verification result message
       */
      message: string;
      data: {
        /**
         * Whether the backup code was valid
         */
        verified: boolean;
        /**
         * Number of backup codes remaining
         */
        codesRemaining: number;
        /**
         * ID of the user
         */
        userId: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };

export interface TwoFactorAuthParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface AuditLogsInput {
  [k: string]: unknown;
}

export interface AuditLogsOutput {
  success: boolean;
  data?: {
    [k: string]: unknown;
  };
  message?: string;
  statusCode?: number;
  [k: string]: unknown;
}

export interface AuditLogsParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface RateLimitTestInput {
  [k: string]: unknown;
}

export interface RateLimitTestOutput {
  /**
   * Whether the request is allowed (not rate limited)
   */
  success: boolean;
  rateLimit: {
    /**
     * Whether this request is allowed
     */
    isAllowed: boolean;
    /**
     * Current number of requests in the time window
     */
    currentRequests: number;
    /**
     * Maximum requests allowed in the time window
     */
    maxRequests: number;
    /**
     * Number of requests remaining in the current window
     */
    remainingRequests: number;
    /**
     * Time window duration in milliseconds
     */
    windowMs: number;
    /**
     * Seconds until the rate limit resets
     */
    retryAfter: number;
    /**
     * Unix timestamp when the rate limit will reset
     */
    resetTime: number;
    [k: string]: unknown;
  };
  /**
   * Human-readable message about the rate limit status
   */
  message: string;
  /**
   * HTTP status code (200 = allowed, 429 = rate limited)
   */
  statusCode: 200 | 429;
  [k: string]: unknown;
}

export interface RateLimitTestParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export interface WorkflowDiscoveryInput {
  [k: string]: unknown;
}

export interface WorkflowDiscoveryOutput {
  /**
   * Array of discovered workflow schemas
   */
  workflows: {
    /**
     * Unique workflow identifier
     */
    key: string;
    /**
     * Human-readable workflow name
     */
    name: string;
    /**
     * Workflow version
     */
    version: string;
    /**
     * Workflow description
     */
    description: string;
    /**
     * API endpoint path
     */
    path: string;
    /**
     * Supported HTTP methods
     */
    methods: ('GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'ANY')[];
    /**
     * Whether authentication is required
     */
    authRequired: boolean;
    /**
     * Required user roles
     */
    roles: string[];
    /**
     * JSON Schema for input validation
     */
    inputSchema?: {
      [k: string]: unknown;
    };
    /**
     * JSON Schema for output validation
     */
    outputSchema?: {
      [k: string]: unknown;
    };
    /**
     * URL and query parameter schemas
     */
    parameters?: {
      /**
       * Path parameter schemas
       */
      path?: {
        [k: string]: {
          [k: string]: unknown;
        };
      };
      /**
       * Query parameter schemas
       */
      query?: {
        [k: string]: {
          [k: string]: unknown;
        };
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  }[];
  /**
   * Total number of discovered workflows
   */
  totalCount: number;
  /**
   * Current user's role
   */
  userRole: 'guest' | 'user' | 'admin';
  /**
   * Discovery timestamp in ISO format
   */
  timestamp: string;
  /**
   * Workflow discovery API version
   */
  version: string;
  [k: string]: unknown;
}

export interface WorkflowDiscoveryParams {
  query?: {
    page?: number;
    limit?: number;
    search?: string;
  };
}

export type WorkflowMethod = 'ANY';
