// Blok Framework - Prisma Schema
// Complete database schema for full-stack applications

generator client {
    provider = "prisma-client-js"
    output   = "../database/generated/prisma"
}

datasource db {
    provider = "sqlite"
    url      = "file:../database/app.db"
}

// Enums for type safety
enum Role {
    ADMIN
    USER
}

enum NotificationType {
    INFO
    SUCCESS
    WARNING
    ERROR
    SYSTEM
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum LogRiskLevel {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

// Users table - Core authentication and user management
model User {
    id               String   @id @default(uuid())
    email            String   @unique(map: "users_email_unique")
    passwordHash     String   @map("password_hash")
    name             String
    role             Role     @default(USER)
    emailVerified    Boolean  @default(false) @map("email_verified")
    profileImage     String?  @map("profile_image")
    preferences      String? // JSON string for user preferences
    twoFactorEnabled Boolean  @default(false) @map("two_factor_enabled")
    twoFactorSecret  String?  @map("two_factor_secret")
    backupCodes      String?  @map("backup_codes") // JSON array
    createdAt        DateTime @default(now()) @map("created_at")
    updatedAt        DateTime @updatedAt @map("updated_at")

    // Relations
    sessions      Session[]
    notifications Notification[]

    @@map("users")
}

// Sessions table - User authentication sessions
model Session {
    id        String   @id @default(uuid())
    userId    String   @map("user_id")
    token     String   @unique(map: "sessions_token_unique")
    expiresAt DateTime @map("expires_at")
    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@map("sessions")
}

// Notifications table - User notifications system
model Notification {
    id             String           @id @default(uuid())
    userId         String           @map("user_id")
    title          String
    message        String
    type           NotificationType @default(INFO)
    priority       Priority         @default(MEDIUM)
    isRead         Boolean          @default(false) @map("is_read")
    readAt         DateTime?        @map("read_at")
    actionUrl      String?          @map("action_url")
    actionLabel    String?          @map("action_label")
    category       String?
    metadata       String? // JSON string for additional data
    sourceWorkflow String?          @map("source_workflow")
    sourceNode     String?          @map("source_node")
    expiresAt      DateTime?        @map("expires_at")
    createdAt      DateTime         @default(now()) @map("created_at")

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@map("notifications")
}

// Audit logs table - Security and compliance logging
model AuditLog {
    id           String   @id @default(uuid())
    userId       String?  @map("user_id")
    action       String
    resource     String?
    resourceType String?  @map("resource_type")
    resourceId   String?  @map("resource_id")
    details      String? // JSON string
    ipAddress    String?  @map("ip_address")
    userAgent    String?  @map("user_agent")
    success      Boolean  @default(true)
    errorMessage String?  @map("error_message")
    createdAt    DateTime @default(now()) @map("created_at")

    @@map("audit_logs")
}

// System logs table - Application activity logging
model SystemLog {
    id              String       @id @default(uuid())
    userId          String       @map("user_id")
    userEmail       String       @map("user_email")
    userName        String       @map("user_name")
    userRole        String       @map("user_role")
    action          String
    actionType      String       @map("action_type")
    resourceType    String       @map("resource_type")
    resourceId      String?      @map("resource_id")
    resourceName    String?      @map("resource_name")
    httpMethod      String       @map("http_method")
    endpoint        String
    ipAddress       String       @map("ip_address")
    userAgent       String       @map("user_agent")
    details         String? // JSON string
    changesSummary  String?      @map("changes_summary") // JSON string
    workflowName    String?      @map("workflow_name")
    nodeName        String?      @map("node_name")
    executionTimeMs Int?         @map("execution_time_ms")
    statusCode      Int          @map("status_code")
    success         Boolean      @default(true)
    riskLevel       LogRiskLevel @map("risk_level")
    complianceFlags String?      @map("compliance_flags") // JSON string
    createdAt       DateTime     @default(now()) @map("created_at")

    @@index([userId])
    @@index([createdAt])
    @@index([riskLevel])
    @@index([success])
    @@map("system_logs")
}

// Log retention policy table - Data lifecycle management
model LogRetentionPolicy {
    id            String    @id @default(uuid())
    retentionDays Int       @map("retention_days")
    archiveDays   Int       @map("archive_days")
    lastCleanup   DateTime? @map("last_cleanup")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")

    @@map("log_retention_policy")
}

// Password reset tokens table - Secure password recovery
model PasswordReset {
    id        String   @id @default(uuid())
    email     String
    token     String   @unique
    expiresAt DateTime @map("expires_at")
    used      Boolean  @default(false)
    createdAt DateTime @default(now()) @map("created_at")

    @@map("password_resets")
}
